# -*- coding: utf-8 -*-
"""SHAIK_ABEED_ALI__ADVERK__MAJOR__PROJECT (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xg7nMztOMRvh8O0zeF041EODpJ8N5w4r
"""

import pandas as pd
file_path = "/content/CAR DETAILS FROM CAR DEKHO.csv"
data = pd.read_csv(file_path)
print(data.head())

import pandas as pd
import numpy as np
file_path = "/content/CAR DETAILS FROM CAR DEKHO.csv"
data = pd.read_csv(file_path)
print(data.info())
data = data.dropna()
data['year'] = data['year'].astype(int)
data['km_driven'] = data['km_driven'].astype(str).str.replace(",", "").astype(int)
data['fuel'] = data['fuel'].astype("category").cat.codes
data['seller_type'] = data['seller_type'].astype("category").cat.codes
data['transmission'] = data['transmission'].astype("category").cat.codes
data['owner'] = data['owner'].astype("category").cat.codes
data = data.drop(columns=['name'])
print(data.head())

import pandas as pd
import numpy as np
file_path = "/content/CAR DETAILS FROM CAR DEKHO.csv"
data = pd.read_csv(file_path)
print("Dataset Info:")
print(data.info())
print("\nFirst 5 Rows of the Dataset:")
print(data.head())
data['year'] = data['year'].astype(int)
data['km_driven'] = data['km_driven'].astype(str).str.replace(',', '').astype(int)
data = data.rename(columns={"transmission": "transmission_type"})
data['fuel'] = data['fuel'].astype('category').cat.codes
data['seller_type'] = data['seller_type'].astype('category').cat.codes
data['transmission_type'] = data['transmission_type'].astype('category').cat.codes
data['owner'] = data['owner'].astype('category').cat.codes
data = data.drop(columns=['name'])
print("\nCleaned Dataset Info:")
print(data.info())
print("\nDescriptive Statistics of Cleaned Data:")
print(data.describe())

import seaborn as sns
import matplotlib.pyplot as plt
sns.histplot(data['selling_price'], kde=True)
plt.title("Distribution of Selling Prices")
plt.show()
correlation_matrix = data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.title("Correlation Matrix")
plt.show()
sns.pairplot(data)
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
X = data.drop(columns=['selling_price'])
y = data['selling_price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
models = {
    "Linear Regression": LinearRegression(),
    "Decision Tree": DecisionTreeRegressor(),
    "Random Forest": RandomForestRegressor()
}
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print(f"{name}:")
    print(f"  R2 Score: {r2_score(y_test, y_pred)}")
    print(f"  MSE: {mean_squared_error(y_test, y_pred)}")
    print(f"  MAE: {mean_absolute_error(y_test, y_pred)}")
    print("-" * 30)

from sklearn.model_selection import GridSearchCV
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [10, 20, None]
    }
grid_search = GridSearchCV(RandomForestRegressor(), param_grid, cv=3, scoring='r2')
grid_search.fit(X_train, y_train)
print("Best Parameters:", grid_search.best_params_)
print("Best R2 Score:", grid_search.best_score_)

pip install streamlit

import joblib
joblib.dump(model, "car_price_model.pkl")

import streamlit as st
import numpy as np
import joblib
model = joblib.load("car_price_model.pkl")
st.title("Car Price Prediction App")
st.write("Predict the price of a used car based on various features.")
year = st.number_input("Year of Purchase", min_value=2000, max_value=2023, step=1)
km_driven = st.number_input("Kilometers Driven", min_value=0)
fuel = st.selectbox("Fuel Type", ["Petrol", "Diesel", "CNG", "LPG", "Electric"])
seller_type = st.selectbox("Seller Type", ["Individual", "Dealer", "Trustmark Dealer"])
transmission = st.selectbox("Transmission Type", ["Manual", "Automatic"])
owner = st.selectbox("Owner Type", ["First Owner", "Second Owner", "Third Owner", "Fourth & Above", "Test Drive Car"])
fuel_mapping = {"Petrol": 0, "Diesel": 1, "CNG": 2, "LPG": 3, "Electric": 4}
seller_type_mapping = {"Individual": 0, "Dealer": 1, "Trustmark Dealer": 2}
transmission_mapping = {"Manual": 0, "Automatic": 1}
owner_mapping = {
    "First Owner": 0, "Second Owner": 1, "Third Owner": 2,
    "Fourth & Above": 3, "Test Drive Car": 4
}
features = np.array([
    year, km_driven, fuel_mapping[fuel], seller_type_mapping[seller_type],
    transmission_mapping[transmission], owner_mapping[owner]
]).reshape(1, -1)
if st.button("Predict Price"):
    try:
        price = model.predict(features)
        st.success(f"Predicted Price: â‚¹ {price[0]:,.2f}")
    except Exception as e:
        st.error(f"An error occurred: {e}")